
To build a WAR for Tomcat, run

> mvn clean package

==============================

Before building the WAR, edit the parameters in src/main/webapp/WEB-INF/web.xml to properly configure the server

Here is a list of parameters found in web.xml and their explanations:

cassandra.node.count  -  number of cassandra seed nodes for your cassandra cluster

cassandra.node.name.<n> - individual cassandra seed node names.  <n> is an integer starting at 1, and it must end at cassandra.node.count

cassandra.cluster.name  - a name assigned to Hector Cluster object.  Up to Cassandra/Hector 0.8.2 this name doesn't seem to matter and need not to be the same as the Cluster name configured for cassandra

cassandra.keyspace.name  - name of Cassandra keyspace that holds HTRC Corpus.  This name must be exactly what's in Cassandra

volume.content.scf.name  - name of the super column family that holds volume content.  this assumes a super column family schema.  most likely to change soon

hector.access.max.attempts  - maximum number of attempts a Hector request should try to access Cassandra. Using default settings, Hector requests to Cassandra can time out, so the code uses exponential back-off to try multiple times.

hector.access.fail.init.delay  - initial amount of time (in milliseconds) Hector should wait before trying to send the request to Cassandra again.

hector.access.fail.max.delay  - maximum amount of time (in milliseconds) Hector can wait before trying to send the request to Cassandra again.  Hector waits for hector.access.fail.init.delay ms on the first HTimedOutException, and for subsequent failures it doubles the amount of time to wait, until the amount exceeds hector.access.fail.max.delay, and then it waits for the max delay amount until either the request succeeds or the max attempts have reached.

async.worker.count - number of asynchronous worker threads to deploy

max.pages.per.retrieval - maximum number of pages that each async worker may retrieve as a single fetch.  This is because each volume may contain a different number of pages, and this parameter breaks down the workload of volume retrieval into a more balanced and proportional workload

max.async.fetch.entry.count - maxmum number of fetches to be loaded into the queue for async workers.  This prevents a large workload to monopolize the queue

min.entry.count.trigger.dispatch - minimum number of entries in the queue to trigger more fetches to be loaded into the queue.  This is a threshold to load more work into the async queue (if there is more work).

max.exceptions.to.report - maximum number of exceptions to report back to the requesting client. Use 0 to set  unlimited.

max.volumes.allowed  - maximum number volumes a client can retrieve in one request.  Use 0 to set unlimited.  This is entirely based on the number of unique volumeIDs in the request. Deprecated

max.total.pages.allowed  - maximum number of pages a client can retrieve in one request.  Use 0 to set unlimited.  This is the total number of pages tallied from all volumes. Deprecated

max.pages.per.volume.allowed  - maximum number of pages from each individual volume a client can retrieve in one request.  Use 0 to set unlimited. Deprecated

audit.class  - specifies which auditor implementation to use. Must be the fully qualified class name of a class that extends Auditor.  Currently there are two: edu.indiana.d2i.htrc.access.audit.NullAuditor and edu.indiana.d2i.htrc.access.audit.Log4jAuditor.  The first one is a dummy that does nothing.  The second one uses log4j to write audit files.
